import processing.serial.*;

Serial sensor;

PImage slider;
PImage knob;

int numSlider = 3;
int[] slider_x = new int[numSlider];
int[] slider_y = new int[numSlider];
int[] knob_x = new int[numSlider];
int[] knob_y = new int[numSlider];
int margin = 24;
int min_x = 19;
int max_x = 200;
int slice = (max_x - min_x) / 8 + 1;
int value = 87;
int new_x;
int knobX0[] = {min_x, min_x, min_x, min_x};
int knobX1[] = {min_x, min_x, min_x, min_x};
int knobX2[] = {min_x, min_x, min_x, min_x};
String[] b = {""};
int x = -1;
int y = 0;

byte[] rs = { '1', '2', '3', '4', '5', '6', '7', '8' };
byte[] gs = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' };
byte[] bs = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };

void setup() {
  size(256, 216);
  slider = loadImage("slider.png");
  knob = loadImage("knob.png");
  b = loadStrings("nums.txt");
  for (int i = 0; i < numSlider; i++) {
    slider_x[i] = width / 2 - slider.width / 2;
    slider_y[i] = i * slider.height + margin;
    knob_x[i] = parseInt(b[i]);
    knob_y[i] = slider_y[i];
  }
  sensor = new Serial(this, Serial.list()[0], 9600);
  frameRate(30);
}

void draw() {
  background(240);
  for (int i = 0; i < numSlider; i++) {
    image(slider, slider_x[i], slider_y[i]);
    image(knob, knob_x[i], knob_y[i]);
  }
}

void mouseDragged() {
  for (int i = 0; i < numSlider; i++) {
  if (mouseInRect(knob_x[i], knob_y[i])) {
      new_x = knob_x[i] + mouseX - pmouseX;
      if (new_x > max_x) {
        knob_x[i] = max_x;
      } else {
        if (new_x < min_x) {
          new_x = min_x;
        } else {
          knob_x[i] = new_x;
        }
      }
      int index = (knob_x[i] - min_x) / slice;
      switch (i) {
        case 0:
          sensor.write(rs[index]);
          break;
        case 1:
          sensor.write(gs[index]);
          break;
        case 2:
          sensor.write(bs[index]);
          break;
      }
    }
  }
}

//void serialEvent(Serial s) {
// value = s.read();
// switch (value) {
//   case 87: //W
//     //knobX0 = knob_x[0];
//     //knobX1 = knob_x[1];
//     //knobX2 = knob_x[2];
//     //String[] bytes = {Integer.toString(knobX0), Integer.toString(knobX1), Integer.toString(knobX2)};
//     //saveStrings("nums.txt", bytes);
//     break;
//   case 82: //R
//    // b = loadStrings("nums.txt");
//     //knob_x[0] = knobX0;
//     //knob_x[1] = knobX1;
//     //knob_x[2] = knobX2;
//     //knob_x[0] = parseInt(b[0]);
//     //knob_x[1] = parseInt(b[1]);
//     //knob_x[2] = parseInt(b[2]);
//     break;
//     case 1:
//      //knob_x[0] = 0 * slice + min_x;
//     break;
// }
// //println(value);
  
//}
void serialEvent(Serial s) {
  value = s.read();
  switch (value) {
    case 87: 
      if (y == 0) {
      knobX0[0] = knob_x[0];
      knobX1[0] = knob_x[1];
      knobX2[0] = knob_x[2];
  }
  if (y == 1) {
      knobX0[1] = knob_x[0];
      knobX1[1] = knob_x[1];
      knobX2[1] = knob_x[2];
  }
  if (y == 2) {
      knobX0[2] = knob_x[0];
      knobX1[2] = knob_x[1];
      knobX2[2] = knob_x[2];
  }
  if (y == 3) {
      knobX0[3] = knob_x[0];
      knobX1[3] = knob_x[1];
      knobX2[3] = knob_x[2];
  }
    break;
    case 82:
    if (y == 0) {
    knob_x[0] = knobX0[0];
    knob_x[1] = knobX1[0];
    knob_x[2] = knobX2[0];
    }
    if (y == 1 ) {
    knob_x[0] = knobX0[1];
    knob_x[1] = knobX1[1];
    knob_x[2] = knobX2[1];
    }
    if (y == 2 ) {
    knob_x[0] = knobX0[2];
    knob_x[1] = knobX1[2];
    knob_x[2] = knobX2[2];
    }
    if (y == 3 ) {
    knob_x[0] = knobX0[3];
    knob_x[1] = knobX1[3];
    knob_x[2] = knobX2[3];
    }
    break;
  }
  println(value);
  y++;
  if ( y == 4) {
    y = 0;
  }
}
boolean mouseInRect(int x, int y) {
  return mouseX >= x && mouseX <= x + knob.width && mouseY >= y && mouseY <= y + knob.height;
}
void setColor0(int in) {
  if(x == -1) {
    switch (in) {
      case 1:
        knobX0[0] = knob_x[0];
      break;
      case 3:
       knobX0[0] = knob_x[0];
      break;
      case 7:
       knobX0[0] = knob_x[0];
      break;
      case 15:
       knobX0[0] = knob_x[0];
      break;
      case 31:
       knobX0[0] =knob_x[0];
      break;
      case 63:
       knobX0[0] = knob_x[0];
      break;
      case 127:
       knobX0[0] = knob_x[0];
      break;
      case 255:
      knobX0[0] = knob_x[0];
      break;
    }
    x++;
  }
    if(x == 0) {
    switch (in) {
      case 1:
        knobX1[0] = knob_x[1];
      break;
      case 3:
       knobX1[0] = knob_x[1];
      break;
      case 7:
       knobX1[0] = knob_x[1];
      break;
      case 15:
       knobX1[0] = knob_x[1];
      break;
      case 31:
       knobX1[0] = knob_x[1];
      break;
      case 63:
       knobX1[0] = knob_x[1];
      break;
      case 127:
       knobX1[0] = knob_x[1];
      break;
      case 255:
       knobX1[0] = knob_x[1];
      break;
    }
    x++;
  }
  if (x == 1) {
    switch (in) {
      case 1:
        knobX2[0] = knob_x[2];
      break;
      case 3:
       knobX2[0] = knob_x[2];
      break;
      case 7:
       knobX2[0] = knob_x[2];
      break;
      case 15:
       knobX2[0] = knob_x[2];
      break;
      case 31:
       knobX2[0] = knob_x[2];
      break;
      case 63:
       knobX2[0] = knob_x[2];
      break;
      case 127:
       knobX2[0] = knob_x[2];
      break;
      case 255:
       knobX2[0] = knob_x[2];
      break;
    }
    x = -1;
  }
}
void setColor1(int in) {
  if(x == -1) {
    switch (in) {
      case 1:
        knobX0[1] = knob_x[0];
      break;
      case 3:
       knobX0[1] = knob_x[0];
      break;
      case 7:
       knobX0[1] = knob_x[0];
      break;
      case 15:
       knobX0[1] = knob_x[0];
      break;
      case 31:
       knobX0[1] =knob_x[0];
      break;
      case 63:
       knobX0[1] = knob_x[0];
      break;
      case 127:
       knobX0[1] = knob_x[0];
      break;
      case 255:
      knobX0[1] = knob_x[0];
      break;
    }
    x++;
  }
    if(x == 0) {
    switch (in) {
      case 1:
        knobX1[1] = knob_x[1];
      break;
      case 3:
       knobX1[1] = knob_x[1];
      break;
      case 7:
       knobX1[1] = knob_x[1];
      break;
      case 15:
       knobX1[1] = knob_x[1];
      break;
      case 31:
       knobX1[1] = knob_x[1];
      break;
      case 63:
       knobX1[1] = knob_x[1];
      break;
      case 127:
       knobX1[1] = knob_x[1];
      break;
      case 255:
       knobX1[1] = knob_x[1];
      break;
    }
    x++;
  }
  if (x == 1) {
    switch (in) {
      case 1:
        knobX2[1] = knob_x[2];
      break;
      case 3:
       knobX2[1] = knob_x[2];
      break;
      case 7:
       knobX2[1] = knob_x[2];
      break;
      case 15:
       knobX2[1] = knob_x[2];
      break;
      case 31:
       knobX2[1] = knob_x[2];
      break;
      case 63:
       knobX2[1] = knob_x[2];
      break;
      case 127:
       knobX2[1] = knob_x[2];
      break;
      case 255:
       knobX2[1] = knob_x[2];
      break;
    }
    x = -1;
  }
}
void setColor2(int in) {
  if(x == -1) {
    switch (in) {
      case 1:
        knobX0[2] = knob_x[0];
      break;
      case 3:
       knobX0[2] = knob_x[0];
      break;
      case 7:
       knobX0[2] = knob_x[0];
      break;
      case 15:
       knobX0[2] = knob_x[0];
      break;
      case 31:
       knobX0[2] =knob_x[0];
      break;
      case 63:
       knobX0[2] = knob_x[0];
      break;
      case 127:
       knobX0[2] = knob_x[0];
      break;
      case 255:
      knobX0[2] = knob_x[0];
      break;
    }
    x++;
  }
    if(x == 0) {
    switch (in) {
      case 1:
        knobX1[2] = knob_x[1];
      break;
      case 3:
       knobX1[2] = knob_x[1];
      break;
      case 7:
       knobX1[2] = knob_x[1];
      break;
      case 15:
       knobX1[2] = knob_x[1];
      break;
      case 31:
       knobX1[2] = knob_x[1];
      break;
      case 63:
       knobX1[2] = knob_x[1];
      break;
      case 127:
       knobX1[2] = knob_x[1];
      break;
      case 255:
       knobX1[2] = knob_x[1];
      break;
    }
    x++;
  }
  if (x == 1) {
    switch (in) {
      case 1:
        knobX2[2] = knob_x[2];
      break;
      case 3:
       knobX2[2] = knob_x[2];
      break;
      case 7:
       knobX2[2] = knob_x[2];
      break;
      case 15:
       knobX2[2] = knob_x[2];
      break;
      case 31:
       knobX2[2] = knob_x[2];
      break;
      case 63:
       knobX2[2] = knob_x[2];
      break;
      case 127:
       knobX2[2] = knob_x[2];
      break;
      case 255:
       knobX2[2] = knob_x[2];
      break;
    }
    x = -1;
  }
}
void setColor3(int in) {
  if(x == -1) {
    switch (in) {
      case 1:
        knobX0[3] = knob_x[0];
      break;
      case 3:
       knobX0[3] = knob_x[0];
      break;
      case 7:
       knobX0[3] = knob_x[0];
      break;
      case 15:
       knobX0[3] = knob_x[0];
      break;
      case 31:
       knobX0[3] =knob_x[0];
      break;
      case 63:
       knobX0[3] = knob_x[0];
      break;
      case 127:
       knobX0[3] = knob_x[0];
      break;
      case 255:
      knobX0[3] = knob_x[0];
      break;
    }
    x++;
  }
    if(x == 0) {
    switch (in) {
      case 1:
        knobX1[3] = knob_x[1];
      break;
      case 3:
       knobX1[3] = knob_x[1];
      break;
      case 7:
       knobX1[3] = knob_x[1];
      break;
      case 15:
       knobX1[3] = knob_x[1];
      break;
      case 31:
       knobX1[3] = knob_x[1];
      break;
      case 63:
       knobX1[3] = knob_x[1];
      break;
      case 127:
       knobX1[3] = knob_x[1];
      break;
      case 255:
       knobX1[3] = knob_x[1];
      break;
    }
    x++;
  }
  if (x == 1) {
    switch (in) {
      case 1:
        knobX2[3] = knob_x[2];
      break;
      case 3:
       knobX2[3] = knob_x[2];
      break;
      case 7:
       knobX2[3] = knob_x[2];
      break;
      case 15:
       knobX2[3] = knob_x[2];
      break;
      case 31:
       knobX2[3] = knob_x[2];
      break;
      case 63:
       knobX2[3] = knob_x[2];
      break;
      case 127:
       knobX2[3] = knob_x[2];
      break;
      case 255:
       knobX2[3] = knob_x[2];
      break;
    }
    x = -1;
  }
}
